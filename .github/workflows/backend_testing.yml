name: Continous Integration

on:
  pull_request:
    branches: '**'

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up testing Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.2
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Run tox lint
        run: |
          poetry run tox -e lint-py310

  backend-tests:
    needs:
      - lint
    strategy:
      fail-fast: true
      matrix:
        config:
          - python-version: '3.8'
            tox: py38
          - python-version: '3.9'
            tox: py39
          - python-version: '3.10'
            tox: py310
        poetry-version: [ 1.2.2 ]
        os: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgis/postgis:12-3.1-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: dontchangeme
          POSTGRES_DB: debug_db
        ports:
          - 9432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up testing Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python-version }}
      - name: Install dependencies
        run: |
          apt-get udpate && apt-get install -y libsqlite3-mod-spatialite
          python -m pip install --upgrade pip tox
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Run tox
        run: |
          poetry run tox -e pytest-${{ matrix.config.tox }}
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          flags: unittests
#          env_vars: OS,PYTHON
#          name: codecov-umbrella
#          fail_ci_if_error: true
#          verbose: true
